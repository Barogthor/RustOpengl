use graphics::Vertex;

pub fn cube_indexes() -> [u16; 36] {
    [
        0, 2, 1, // front
        1, 2, 3,
        4, 5, 6, // back
        5, 7, 6,
        10, 11, 8, //top
        11, 9, 8,
        12, 13, 15, //bottom
        15, 14, 12,
        16, 19, 18, // left
        16, 17, 19,
        20, 22, 21, //right
        21, 22, 23u16,
    ]
}

fn cube_vertexes(tex_coords: [[f32; 2]; 24]) -> [Vertex; 24] {
    [
        Vertex::new(0.0, 1.0, 0.0, [0.0, 0.0, -1.0], tex_coords[0]), // 0 -
        Vertex::new(0.0, 0.0, 0.0, [0.0, 0.0, -1.0], tex_coords[1]), // 1 -
        Vertex::new(1.0, 1.0, 0.0, [0.0, 0.0, -1.0], tex_coords[2]), // 2 -
        Vertex::new(1.0, 0.0, 0.0, [0.0, 0.0, -1.0], tex_coords[3]), // 3 -

        Vertex::new(0.0, 0.0, 1.0, [0.0, 0.0, 1.0], tex_coords[4]), // 4 -
        Vertex::new(1.0, 0.0, 1.0, [0.0, 0.0, 1.0], tex_coords[5]), // 5 -
        Vertex::new(0.0, 1.0, 1.0, [0.0, 0.0, 1.0], tex_coords[6]), // 6 -
        Vertex::new(1.0, 1.0, 1.0, [0.0, 0.0, 1.0], tex_coords[7]), // 7 -

        Vertex::new(0.0, 1.0, 0.0, [0.0, 1.0, 0.0], tex_coords[8]), // 8 -
        Vertex::new(1.0, 1.0, 0.0, [0.0, 1.0, 0.0], tex_coords[9]), // 9 -
        Vertex::new(0.0, 1.0, 1.0, [0.0, 1.0, 0.0], tex_coords[10]), // 10 - 6 bis
        Vertex::new(1.0, 1.0, 1.0, [0.0, 1.0, 0.0], tex_coords[11]), // 11 - 7 bis

        Vertex::new(0.0, 0.0, 0.0, [0.0, -1.0, 0.0], tex_coords[12]), // 12 - 1 bis
        Vertex::new(1.0, 0.0, 0.0, [0.0, -1.0, 0.0], tex_coords[13]), // 13 - 3 bis
        Vertex::new(0.0, 0.0, 1.0, [0.0, -1.0, 0.0], tex_coords[14]), // 14 - 4 bis
        Vertex::new(1.0, 0.0, 1.0, [0.0, -1.0, 0.0], tex_coords[15]), // 15 - 5 bis

        Vertex::new(0.0, 0.0, 0.0, [-1.0, 0.0, 0.0], tex_coords[16]), // 16 - 1 bis
        Vertex::new(0.0, 0.0, 1.0, [-1.0, 0.0, 0.0], tex_coords[17]), // 17 - 4 bis
        Vertex::new(0.0, 1.0, 0.0, [-1.0, 0.0, 0.0], tex_coords[18]), // 18 - 10 bis
        Vertex::new(0.0, 1.0, 1.0, [-1.0, 0.0, 0.0], tex_coords[19]), // 19 - 11 bis

        Vertex::new(1.0, 0.0, 0.0, [1.0, 0.0, 0.0], tex_coords[20]), // 20 - 3 bis
        Vertex::new(1.0, 0.0, 1.0, [1.0, 0.0, 0.0], tex_coords[21]), // 21 - 5 bis
        Vertex::new(1.0, 1.0, 0.0, [1.0, 0.0, 0.0], tex_coords[22]), // 22 - 12 bis
        Vertex::new(1.0, 1.0, 1.0, [1.0, 0.0, 0.0], tex_coords[23]), // 23 - 13 bis
    ]
}

pub fn cube_vertexes_2d() -> [Vertex; 24] {
    let text_coords = [
        [0.00, 0.00], [1.00, 0.00], [0.00, 1.00], [1.00, 1.00f32],
        [0.00, 0.00], [1.00, 0.00], [0.00, 1.00], [1.00, 1.00f32],
        [0.00, 0.00], [1.00, 0.00], [0.00, 1.00], [1.00, 1.00f32],
        [0.00, 0.00], [1.00, 0.00], [0.00, 1.00], [1.00, 1.00f32],
        [0.00, 0.00], [1.00, 0.00], [0.00, 1.00], [1.00, 1.00f32],
        [0.00, 0.00], [1.00, 0.00], [0.00, 1.00], [1.00, 1.00f32],
    ];
    cube_vertexes(text_coords)
}


pub fn cube_vertexes_3d() -> [Vertex; 24] {
    let tex_coords = [
        [0.00, 0.66],
        [0.25, 0.66],
        [0.00, 0.33],
        [0.25, 0.33],
        [0.50, 0.66],
        [0.50, 0.33],
        [0.75, 0.66],
        [0.75, 0.33],
        [1.00, 0.66],
        [1.00, 0.33],
        [0.75, 0.66],
        [0.75, 0.33],
        [0.25, 0.66],
        [0.25, 0.33],
        [0.50, 0.66],
        [0.50, 0.33],
        [0.25, 0.66],
        [0.50, 0.66],
        [0.25, 1.00],
        [0.50, 1.00],
        [0.25, 0.33],
        [0.50, 0.33],
        [0.25, 0.00],
        [0.50, 0.00f32],
    ];
    cube_vertexes(tex_coords)
}

pub fn normal() -> [[f32; 3]; 14] {
    [
        [-0.0, 0.0, 1.0],
        [-0.0, 0.0, 1.0],
        [-0.0, 0.0, 1.0],
        [-0.0, 0.0, 1.0],
        // back
        [0.0, 0.0, -1.0],
        [0.0, 0.0, -1.0],
        [0.0, 0.0, -1.0],
        [0.0, 0.0, -1.0],
        // top
        [-0.0, 0.0, 1.0],
        [-0.0, 0.0, 1.0],
        [0.0, 1.0, 0.0],
        [0.0, 1.0, 0.0],
        [-1.0, 0.0, 0.0],
        [-1.0, 0.0, 0.0f32],
    ]
}

// pub const UV_MAP: [f32; 28] = [
//     0., 0.66, 0.25, 0.66, 0., 0.33, 0.25, 0.33, 0.5, 0.66, 0.5, 0.33, 0.75, 0.66, 0.75, 0.33, 1.,
//     0.66, 1., 0.33, 0.25, 1., 0.5, 1., 0.25, 0., 0.5, 0.,
// ];

/*
    let p = [
        vec3(0.0, 1.0, 0.0),
        vec3(0.0, 0.0, 0.0),
        vec3(1.0, 1.0, 0.0),
        vec3(1.0, 0.0, 0.0),

        vec3(0.0, 0.0, 1.0),
        vec3(1.0, 0.0, 1.0),
        vec3(0.0, 1.0, 1.0),
        vec3(1.0, 1.0, 1.0),

        vec3(0.0, 1.0, 0.0),
        vec3(1.0, 1.0, 0.0),
        vec3(0.0, 1.0, 1.0),
        vec3(1.0, 1.0, 1.0),

        vec3(0.0, 0.0, 0.0),
        vec3(1.0, 0.0, 0.0),
        vec3(0.0, 0.0, 1.0),
        vec3(1.0, 0.0, 1.0),

        vec3(0.0, 0.0, 0.0),
        vec3(0.0, 0.0, 1.0),
        vec3(0.0, 1.0, 0.0),
        vec3(0.0, 1.0, 1.0),

        vec3(1.0, 0.0, 0.0),
        vec3(1.0, 0.0, 1.0),
        vec3(1.0, 1.0, 0.0),
        vec3(1.0, 1.0, 1.0),
    ];

    let mut normals = vec![];
    normals.push(cross(&(&p[1] - &p[0]), &(&p[2] - &p[0])));  // plan1
    normals.push(cross(&(&p[6] - &p[4]), &(&p[5] - &p[4])));  // plan2
    normals.push(cross(&(&p[11] - &p[10]), &(&p[8] - &p[10])));  // plan3
    normals.push(cross(&(&p[13] - &p[12]), &(&p[15] - &p[12])));  // plan4
    normals.push(cross(&(&p[19] - &p[16]),&(&p[18] - &p[16])));  // plan5
    normals.push(cross(&(&p[22] - &p[20]),&(&p[21] - &p[20])));  // plan6
    println!("{:?}", normals);
    return;
 */