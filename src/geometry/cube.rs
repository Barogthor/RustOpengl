use graphics::Vertex;

pub fn cube_indexes() -> [u16; 36] {
    [
        0, 2, 1, // front
        1, 2, 3,
        4, 5, 6, // back
        5, 7, 6,
        6, 7, 8, //top
        7, 9, 8,
        1, 3, 4, //bottom
        3, 5, 4,
        1, 11, 10, // left
        1, 4, 11,
        3, 12, 5, //right
        5, 12, 13u16,
    ]
}

pub fn cube_vertexes() -> [Vertex; 14] {
    [
        Vertex::new(0.0, 1.0, 0.0, [0.0, 0.0, 1.0], [0.00, 0.66]), // 0 -
        Vertex::new(0.0, 0.0, 0.0, [0.0, 0.0, 1.0], [0.25, 0.66]), // 1 -
        Vertex::new(1.0, 1.0, 0.0, [0.0, 0.0, 1.0], [0.00, 0.33]), // 2 -
        Vertex::new(1.0, 0.0, 0.0, [0.0, 0.0, 1.0], [0.25, 0.33]), // 3 -

        Vertex::new(0.0, 0.0, 1.0, [0.0, 0.0, -1.0], [0.50, 0.66]), // 4 -
        Vertex::new(1.0, 0.0, 1.0, [0.0, 0.0, -1.0], [0.50, 0.33]), // 5 -
        Vertex::new(0.0, 1.0, 1.0, [0.0, 0.0, -1.0], [0.75, 0.66]), // 6 -
        Vertex::new(1.0, 1.0, 1.0, [0.0, 0.0, -1.0], [0.75, 0.33]), // 7 -

        Vertex::new(0.0, 1.0, 0.0, [0.0, -1.0, 0.0], [1.00, 0.66]), // 8 -
        Vertex::new(1.0, 1.0, 0.0, [0.0, -1.0, 0.0], [1.00, 0.33]), // 9 -

        Vertex::new(0.0, 1.0, 0.0, [0.0, 1.0, 0.0], [0.25, 1.00]), // 10 -
        Vertex::new(0.0, 1.0, 1.0, [0.0, 1.0, 0.0], [0.50, 1.00]), // 11 -

        Vertex::new(1.0, 1.0, 0.0, [-1.0, 0.0, 0.0], [0.25, 0.00]), // 12 -
        Vertex::new(1.0, 1.0, 1.0, [-1.0, 0.0, 0.0], [0.50, 0.00]), // 13 -
    ]
}

pub fn normal() -> [[f32; 3]; 14] {
    [
        [-0.0, 0.0, 1.0],
        [-0.0, 0.0, 1.0],
        [-0.0, 0.0, 1.0],
        [-0.0, 0.0, 1.0],
        // back
        [0.0, 0.0, -1.0],
        [0.0, 0.0, -1.0],
        [0.0, 0.0, -1.0],
        [0.0, 0.0, -1.0],
        // top
        [-0.0, 0.0, 1.0],
        [-0.0, 0.0, 1.0],
        [0.0, 1.0, 0.0],
        [0.0, 1.0, 0.0],
        [-1.0, 0.0, 0.0],
        [-1.0, 0.0, 0.0f32],
    ]
}

// pub const UV_MAP: [f32; 28] = [
//     0., 0.66, 0.25, 0.66, 0., 0.33, 0.25, 0.33, 0.5, 0.66, 0.5, 0.33, 0.75, 0.66, 0.75, 0.33, 1.,
//     0.66, 1., 0.33, 0.25, 1., 0.5, 1., 0.25, 0., 0.5, 0.,
// ];

/*
let p = [
        vec3(0.0, 1.0, 0.0),
        vec3(0.0, 0.0, 0.0),
        vec3(1.0, 1.0, 0.0),
        vec3(1.0, 0.0, 0.0),
        vec3(0.0, 0.0, 1.0),
        vec3(1.0, 0.0, 1.0),
        vec3(0.0, 1.0, 1.0),
        vec3(1.0, 1.0, 1.0),
        vec3(0.0, 1.0, 0.0),
        vec3(1.0, 1.0, 0.0),
        vec3(0.0, 1.0, 0.0),
        vec3(0.0, 1.0, 1.0),
        vec3(1.0, 1.0, 0.0),
        vec3(1.0, 1.0, 1.0),
    ];

    let mut normals = vec![];
    normals.push(cross(&(&p[1] - &p[0]), &(&p[3] - &p[1])));  // plan1
    normals.push(cross(&(&p[6] - &p[4]), &(&p[5] - &p[4])));  // plan2
    normals.push(cross(&(&p[4] - &p[6]), &(&p[7] - &p[6])));  // plan3
    normals.push(cross(&(&p[6] - &p[8]), &(&p[9] - &p[8])));  // plan4
    normals.push(cross(&(&p[1] - &p[10]),&(&p[11] - &p[10])));  // plan5
    normals.push(cross(&(&p[3] - &p[12]),&(&p[13] - &p[12])));  // plan6
    println!("{:?}", normals);
    return;

 */